// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: paymentpb/payment.proto

package paymentpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PaymentProviderId int32

const (
	PaymentProviderId_PROVIDER_Reserved PaymentProviderId = 0
	PaymentProviderId_AliPay            PaymentProviderId = 1
	PaymentProviderId_Paypal            PaymentProviderId = 2
	PaymentProviderId_WeChat            PaymentProviderId = 3
)

// Enum value maps for PaymentProviderId.
var (
	PaymentProviderId_name = map[int32]string{
		0: "PROVIDER_Reserved",
		1: "AliPay",
		2: "Paypal",
		3: "WeChat",
	}
	PaymentProviderId_value = map[string]int32{
		"PROVIDER_Reserved": 0,
		"AliPay":            1,
		"Paypal":            2,
		"WeChat":            3,
	}
)

func (x PaymentProviderId) Enum() *PaymentProviderId {
	p := new(PaymentProviderId)
	*p = x
	return p
}

func (x PaymentProviderId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentProviderId) Descriptor() protoreflect.EnumDescriptor {
	return file_paymentpb_payment_proto_enumTypes[0].Descriptor()
}

func (PaymentProviderId) Type() protoreflect.EnumType {
	return &file_paymentpb_payment_proto_enumTypes[0]
}

func (x PaymentProviderId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentProviderId.Descriptor instead.
func (PaymentProviderId) EnumDescriptor() ([]byte, []int) {
	return file_paymentpb_payment_proto_rawDescGZIP(), []int{0}
}

type ChargeStatus int32

const (
	ChargeStatus_Paid     ChargeStatus = 0
	ChargeStatus_Refunded ChargeStatus = 1
)

// Enum value maps for ChargeStatus.
var (
	ChargeStatus_name = map[int32]string{
		0: "Paid",
		1: "Refunded",
	}
	ChargeStatus_value = map[string]int32{
		"Paid":     0,
		"Refunded": 1,
	}
)

func (x ChargeStatus) Enum() *ChargeStatus {
	p := new(ChargeStatus)
	*p = x
	return p
}

func (x ChargeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_paymentpb_payment_proto_enumTypes[1].Descriptor()
}

func (ChargeStatus) Type() protoreflect.EnumType {
	return &file_paymentpb_payment_proto_enumTypes[1]
}

func (x ChargeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargeStatus.Descriptor instead.
func (ChargeStatus) EnumDescriptor() ([]byte, []int) {
	return file_paymentpb_payment_proto_rawDescGZIP(), []int{1}
}

type RefundReason int32

const (
	RefundReason_GeneralError        RefundReason = 0
	RefundReason_Fraud               RefundReason = 1
	RefundReason_Duplicate           RefundReason = 2
	RefundReason_RequestedByCustomer RefundReason = 3
)

// Enum value maps for RefundReason.
var (
	RefundReason_name = map[int32]string{
		0: "GeneralError",
		1: "Fraud",
		2: "Duplicate",
		3: "RequestedByCustomer",
	}
	RefundReason_value = map[string]int32{
		"GeneralError":        0,
		"Fraud":               1,
		"Duplicate":           2,
		"RequestedByCustomer": 3,
	}
)

func (x RefundReason) Enum() *RefundReason {
	p := new(RefundReason)
	*p = x
	return p
}

func (x RefundReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RefundReason) Descriptor() protoreflect.EnumDescriptor {
	return file_paymentpb_payment_proto_enumTypes[2].Descriptor()
}

func (RefundReason) Type() protoreflect.EnumType {
	return &file_paymentpb_payment_proto_enumTypes[2]
}

func (x RefundReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RefundReason.Descriptor instead.
func (RefundReason) EnumDescriptor() ([]byte, []int) {
	return file_paymentpb_payment_proto_rawDescGZIP(), []int{2}
}

type CardType int32

const (
	CardType_CARD_Reserved   CardType = 0
	CardType_Mastercard      CardType = 1
	CardType_Visa            CardType = 2
	CardType_AmericanExpress CardType = 3
	CardType_JCB             CardType = 4
	CardType_Discover        CardType = 5
	CardType_DinersClub      CardType = 6
)

// Enum value maps for CardType.
var (
	CardType_name = map[int32]string{
		0: "CARD_Reserved",
		1: "Mastercard",
		2: "Visa",
		3: "AmericanExpress",
		4: "JCB",
		5: "Discover",
		6: "DinersClub",
	}
	CardType_value = map[string]int32{
		"CARD_Reserved":   0,
		"Mastercard":      1,
		"Visa":            2,
		"AmericanExpress": 3,
		"JCB":             4,
		"Discover":        5,
		"DinersClub":      6,
	}
)

func (x CardType) Enum() *CardType {
	p := new(CardType)
	*p = x
	return p
}

func (x CardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardType) Descriptor() protoreflect.EnumDescriptor {
	return file_paymentpb_payment_proto_enumTypes[3].Descriptor()
}

func (CardType) Type() protoreflect.EnumType {
	return &file_paymentpb_payment_proto_enumTypes[3]
}

func (x CardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardType.Descriptor instead.
func (CardType) EnumDescriptor() ([]byte, []int) {
	return file_paymentpb_payment_proto_rawDescGZIP(), []int{3}
}

type Currency int32

const (
	Currency_CUR_RESERVED Currency = 0
	Currency_AFN          Currency = 1
	Currency_ALL          Currency = 2
	Currency_AMD          Currency = 3
	Currency_ANG          Currency = 4
	Currency_ARS          Currency = 5
	Currency_AUD          Currency = 6
	Currency_AWG          Currency = 7
	Currency_AZN          Currency = 8
	Currency_BAM          Currency = 9
	Currency_BBD          Currency = 10
	Currency_BGN          Currency = 11
	Currency_BHD          Currency = 12
	Currency_BMD          Currency = 13
	Currency_BND          Currency = 14
	Currency_BOB          Currency = 15
	Currency_BRL          Currency = 16
	Currency_BSD          Currency = 17
	Currency_BWP          Currency = 18
	Currency_BYN          Currency = 19
	Currency_BYR          Currency = 20
	Currency_BZD          Currency = 21
	Currency_CAD          Currency = 22
	Currency_CLP          Currency = 23
	Currency_CNY          Currency = 24
	Currency_COP          Currency = 25
	Currency_CRC          Currency = 26
	Currency_CUP          Currency = 27
	Currency_CZK          Currency = 28
	Currency_DKK          Currency = 29
	Currency_DOP          Currency = 30
	Currency_DZD          Currency = 31
	Currency_EEK          Currency = 32
	Currency_EGP          Currency = 33
	Currency_EUR          Currency = 34
	Currency_FJD          Currency = 35
	Currency_FKP          Currency = 36
	Currency_GBP          Currency = 37
	Currency_GGP          Currency = 38
	Currency_GHC          Currency = 39
	Currency_GIP          Currency = 40
	Currency_GTQ          Currency = 41
	Currency_GYD          Currency = 42
	Currency_HKD          Currency = 43
	Currency_HNL          Currency = 44
	Currency_HRK          Currency = 45
	Currency_HUF          Currency = 46
	Currency_IDR          Currency = 47
	Currency_ILS          Currency = 48
	Currency_IMP          Currency = 49
	Currency_INR          Currency = 50
	Currency_IQD          Currency = 51
	Currency_IRR          Currency = 52
	Currency_ISK          Currency = 53
	Currency_JEP          Currency = 54
	Currency_JMD          Currency = 55
	Currency_JOD          Currency = 56
	Currency_JPY          Currency = 57
	Currency_KES          Currency = 58
	Currency_KGS          Currency = 59
	Currency_KHR          Currency = 60
	Currency_KPW          Currency = 61
	Currency_KRW          Currency = 62
	Currency_KWD          Currency = 63
	Currency_KYD          Currency = 64
	Currency_KZT          Currency = 65
	Currency_LAK          Currency = 66
	Currency_LBP          Currency = 67
	Currency_LKR          Currency = 68
	Currency_LRD          Currency = 69
	Currency_LTL          Currency = 70
	Currency_LVL          Currency = 71
	Currency_LYD          Currency = 72
	Currency_MAD          Currency = 73
	Currency_MKD          Currency = 74
	Currency_MNT          Currency = 75
	Currency_MUR          Currency = 76
	Currency_MXN          Currency = 77
	Currency_MWK          Currency = 78
	Currency_MYR          Currency = 79
	Currency_MZN          Currency = 80
	Currency_NAD          Currency = 81
	Currency_NGN          Currency = 82
	Currency_NIO          Currency = 83
	Currency_NOK          Currency = 84
	Currency_NPR          Currency = 85
	Currency_NZD          Currency = 86
	Currency_OMR          Currency = 87
	Currency_PAB          Currency = 88
	Currency_PEN          Currency = 89
	Currency_PHP          Currency = 90
	Currency_PKR          Currency = 91
	Currency_PLN          Currency = 92
	Currency_PYG          Currency = 93
	Currency_QAR          Currency = 94
	Currency_RON          Currency = 95
	Currency_RSD          Currency = 96
	Currency_RUB          Currency = 97
	Currency_RUR          Currency = 98
	Currency_SAR          Currency = 99
	Currency_SBD          Currency = 100
	Currency_SCR          Currency = 101
	Currency_SEK          Currency = 102
	Currency_SGD          Currency = 103
	Currency_SHP          Currency = 104
	Currency_SOS          Currency = 105
	Currency_SRD          Currency = 106
	Currency_SVC          Currency = 107
	Currency_SYP          Currency = 108
	Currency_THB          Currency = 109
	Currency_TND          Currency = 110
	Currency_TRL          Currency = 111
	Currency_TRY          Currency = 112
	Currency_TTD          Currency = 113
	Currency_TWD          Currency = 114
	Currency_TZS          Currency = 115
	Currency_UAH          Currency = 116
	Currency_UGX          Currency = 117
	Currency_AED          Currency = 118
	Currency_UYU          Currency = 119
	Currency_UZS          Currency = 120
	Currency_VEF          Currency = 121
	Currency_VND          Currency = 122
	Currency_XCD          Currency = 123
	Currency_YER          Currency = 124
	Currency_ZAR          Currency = 125
	Currency_ZMW          Currency = 126
	Currency_ZWD          Currency = 127
	Currency_USD          Currency = 128
)

// Enum value maps for Currency.
var (
	Currency_name = map[int32]string{
		0:   "CUR_RESERVED",
		1:   "AFN",
		2:   "ALL",
		3:   "AMD",
		4:   "ANG",
		5:   "ARS",
		6:   "AUD",
		7:   "AWG",
		8:   "AZN",
		9:   "BAM",
		10:  "BBD",
		11:  "BGN",
		12:  "BHD",
		13:  "BMD",
		14:  "BND",
		15:  "BOB",
		16:  "BRL",
		17:  "BSD",
		18:  "BWP",
		19:  "BYN",
		20:  "BYR",
		21:  "BZD",
		22:  "CAD",
		23:  "CLP",
		24:  "CNY",
		25:  "COP",
		26:  "CRC",
		27:  "CUP",
		28:  "CZK",
		29:  "DKK",
		30:  "DOP",
		31:  "DZD",
		32:  "EEK",
		33:  "EGP",
		34:  "EUR",
		35:  "FJD",
		36:  "FKP",
		37:  "GBP",
		38:  "GGP",
		39:  "GHC",
		40:  "GIP",
		41:  "GTQ",
		42:  "GYD",
		43:  "HKD",
		44:  "HNL",
		45:  "HRK",
		46:  "HUF",
		47:  "IDR",
		48:  "ILS",
		49:  "IMP",
		50:  "INR",
		51:  "IQD",
		52:  "IRR",
		53:  "ISK",
		54:  "JEP",
		55:  "JMD",
		56:  "JOD",
		57:  "JPY",
		58:  "KES",
		59:  "KGS",
		60:  "KHR",
		61:  "KPW",
		62:  "KRW",
		63:  "KWD",
		64:  "KYD",
		65:  "KZT",
		66:  "LAK",
		67:  "LBP",
		68:  "LKR",
		69:  "LRD",
		70:  "LTL",
		71:  "LVL",
		72:  "LYD",
		73:  "MAD",
		74:  "MKD",
		75:  "MNT",
		76:  "MUR",
		77:  "MXN",
		78:  "MWK",
		79:  "MYR",
		80:  "MZN",
		81:  "NAD",
		82:  "NGN",
		83:  "NIO",
		84:  "NOK",
		85:  "NPR",
		86:  "NZD",
		87:  "OMR",
		88:  "PAB",
		89:  "PEN",
		90:  "PHP",
		91:  "PKR",
		92:  "PLN",
		93:  "PYG",
		94:  "QAR",
		95:  "RON",
		96:  "RSD",
		97:  "RUB",
		98:  "RUR",
		99:  "SAR",
		100: "SBD",
		101: "SCR",
		102: "SEK",
		103: "SGD",
		104: "SHP",
		105: "SOS",
		106: "SRD",
		107: "SVC",
		108: "SYP",
		109: "THB",
		110: "TND",
		111: "TRL",
		112: "TRY",
		113: "TTD",
		114: "TWD",
		115: "TZS",
		116: "UAH",
		117: "UGX",
		118: "AED",
		119: "UYU",
		120: "UZS",
		121: "VEF",
		122: "VND",
		123: "XCD",
		124: "YER",
		125: "ZAR",
		126: "ZMW",
		127: "ZWD",
		128: "USD",
	}
	Currency_value = map[string]int32{
		"CUR_RESERVED": 0,
		"AFN":          1,
		"ALL":          2,
		"AMD":          3,
		"ANG":          4,
		"ARS":          5,
		"AUD":          6,
		"AWG":          7,
		"AZN":          8,
		"BAM":          9,
		"BBD":          10,
		"BGN":          11,
		"BHD":          12,
		"BMD":          13,
		"BND":          14,
		"BOB":          15,
		"BRL":          16,
		"BSD":          17,
		"BWP":          18,
		"BYN":          19,
		"BYR":          20,
		"BZD":          21,
		"CAD":          22,
		"CLP":          23,
		"CNY":          24,
		"COP":          25,
		"CRC":          26,
		"CUP":          27,
		"CZK":          28,
		"DKK":          29,
		"DOP":          30,
		"DZD":          31,
		"EEK":          32,
		"EGP":          33,
		"EUR":          34,
		"FJD":          35,
		"FKP":          36,
		"GBP":          37,
		"GGP":          38,
		"GHC":          39,
		"GIP":          40,
		"GTQ":          41,
		"GYD":          42,
		"HKD":          43,
		"HNL":          44,
		"HRK":          45,
		"HUF":          46,
		"IDR":          47,
		"ILS":          48,
		"IMP":          49,
		"INR":          50,
		"IQD":          51,
		"IRR":          52,
		"ISK":          53,
		"JEP":          54,
		"JMD":          55,
		"JOD":          56,
		"JPY":          57,
		"KES":          58,
		"KGS":          59,
		"KHR":          60,
		"KPW":          61,
		"KRW":          62,
		"KWD":          63,
		"KYD":          64,
		"KZT":          65,
		"LAK":          66,
		"LBP":          67,
		"LKR":          68,
		"LRD":          69,
		"LTL":          70,
		"LVL":          71,
		"LYD":          72,
		"MAD":          73,
		"MKD":          74,
		"MNT":          75,
		"MUR":          76,
		"MXN":          77,
		"MWK":          78,
		"MYR":          79,
		"MZN":          80,
		"NAD":          81,
		"NGN":          82,
		"NIO":          83,
		"NOK":          84,
		"NPR":          85,
		"NZD":          86,
		"OMR":          87,
		"PAB":          88,
		"PEN":          89,
		"PHP":          90,
		"PKR":          91,
		"PLN":          92,
		"PYG":          93,
		"QAR":          94,
		"RON":          95,
		"RSD":          96,
		"RUB":          97,
		"RUR":          98,
		"SAR":          99,
		"SBD":          100,
		"SCR":          101,
		"SEK":          102,
		"SGD":          103,
		"SHP":          104,
		"SOS":          105,
		"SRD":          106,
		"SVC":          107,
		"SYP":          108,
		"THB":          109,
		"TND":          110,
		"TRL":          111,
		"TRY":          112,
		"TTD":          113,
		"TWD":          114,
		"TZS":          115,
		"UAH":          116,
		"UGX":          117,
		"AED":          118,
		"UYU":          119,
		"UZS":          120,
		"VEF":          121,
		"VND":          122,
		"XCD":          123,
		"YER":          124,
		"ZAR":          125,
		"ZMW":          126,
		"ZWD":          127,
		"USD":          128,
	}
)

func (x Currency) Enum() *Currency {
	p := new(Currency)
	*p = x
	return p
}

func (x Currency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Currency) Descriptor() protoreflect.EnumDescriptor {
	return file_paymentpb_payment_proto_enumTypes[4].Descriptor()
}

func (Currency) Type() protoreflect.EnumType {
	return &file_paymentpb_payment_proto_enumTypes[4]
}

func (x Currency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Currency.Descriptor instead.
func (Currency) EnumDescriptor() ([]byte, []int) {
	return file_paymentpb_payment_proto_rawDescGZIP(), []int{4}
}

type ChargeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency          Currency          `protobuf:"varint,1,opt,name=currency,proto3,enum=paymentpb.Currency" json:"currency,omitempty"`
	Amount            uint64            `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Card              *Card             `protobuf:"bytes,3,opt,name=Card,proto3" json:"Card,omitempty"`
	UserId            string            `protobuf:"bytes,4,opt,name=userId,proto3" json:"userId,omitempty"`
	Statement         string            `protobuf:"bytes,5,opt,name=statement,proto3" json:"statement,omitempty"`
	PaymentProviderId PaymentProviderId `protobuf:"varint,6,opt,name=paymentProviderId,proto3,enum=paymentpb.PaymentProviderId" json:"paymentProviderId,omitempty"`
	Metadata          map[string]string `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ChargeRequest) Reset() {
	*x = ChargeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_paymentpb_payment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeRequest) ProtoMessage() {}

func (x *ChargeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_paymentpb_payment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeRequest.ProtoReflect.Descriptor instead.
func (*ChargeRequest) Descriptor() ([]byte, []int) {
	return file_paymentpb_payment_proto_rawDescGZIP(), []int{0}
}

func (x *ChargeRequest) GetCurrency() Currency {
	if x != nil {
		return x.Currency
	}
	return Currency_CUR_RESERVED
}

func (x *ChargeRequest) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ChargeRequest) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *ChargeRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ChargeRequest) GetStatement() string {
	if x != nil {
		return x.Statement
	}
	return ""
}

func (x *ChargeRequest) GetPaymentProviderId() PaymentProviderId {
	if x != nil {
		return x.PaymentProviderId
	}
	return PaymentProviderId_PROVIDER_Reserved
}

func (x *ChargeRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type RefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Amount uint64       `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Reason RefundReason `protobuf:"varint,3,opt,name=reason,proto3,enum=paymentpb.RefundReason" json:"reason,omitempty"`
}

func (x *RefundRequest) Reset() {
	*x = RefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_paymentpb_payment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundRequest) ProtoMessage() {}

func (x *RefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_paymentpb_payment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundRequest.ProtoReflect.Descriptor instead.
func (*RefundRequest) Descriptor() ([]byte, []int) {
	return file_paymentpb_payment_proto_rawDescGZIP(), []int{1}
}

func (x *RefundRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RefundRequest) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RefundRequest) GetReason() RefundReason {
	if x != nil {
		return x.Reason
	}
	return RefundReason_GeneralError
}

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_paymentpb_payment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_paymentpb_payment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_paymentpb_payment_proto_rawDescGZIP(), []int{2}
}

func (x *GetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Charge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MerchantId   string    `protobuf:"bytes,2,opt,name=merchantId,proto3" json:"merchantId,omitempty"`
	ChargeAmount uint64    `protobuf:"varint,3,opt,name=chargeAmount,proto3" json:"chargeAmount,omitempty"`
	RefundAmount uint64    `protobuf:"varint,4,opt,name=refundAmount,proto3" json:"refundAmount,omitempty"`
	Refunds      []*Refund `protobuf:"bytes,5,rep,name=refunds,proto3" json:"refunds,omitempty"`
	Currency     Currency  `protobuf:"varint,6,opt,name=currency,proto3,enum=paymentpb.Currency" json:"currency,omitempty"`
	UserId       string    `protobuf:"bytes,7,opt,name=userId,proto3" json:"userId,omitempty"`
	Paid         bool      `protobuf:"varint,8,opt,name=paid,proto3" json:"paid,omitempty"`
	Refunded     bool      `protobuf:"varint,9,opt,name=refunded,proto3" json:"refunded,omitempty"`
	Created      int64     `protobuf:"varint,998,opt,name=created,proto3" json:"created,omitempty"`
	Updated      int64     `protobuf:"varint,999,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *Charge) Reset() {
	*x = Charge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_paymentpb_payment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Charge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Charge) ProtoMessage() {}

func (x *Charge) ProtoReflect() protoreflect.Message {
	mi := &file_paymentpb_payment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Charge.ProtoReflect.Descriptor instead.
func (*Charge) Descriptor() ([]byte, []int) {
	return file_paymentpb_payment_proto_rawDescGZIP(), []int{3}
}

func (x *Charge) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Charge) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *Charge) GetChargeAmount() uint64 {
	if x != nil {
		return x.ChargeAmount
	}
	return 0
}

func (x *Charge) GetRefundAmount() uint64 {
	if x != nil {
		return x.RefundAmount
	}
	return 0
}

func (x *Charge) GetRefunds() []*Refund {
	if x != nil {
		return x.Refunds
	}
	return nil
}

func (x *Charge) GetCurrency() Currency {
	if x != nil {
		return x.Currency
	}
	return Currency_CUR_RESERVED
}

func (x *Charge) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Charge) GetPaid() bool {
	if x != nil {
		return x.Paid
	}
	return false
}

func (x *Charge) GetRefunded() bool {
	if x != nil {
		return x.Refunded
	}
	return false
}

func (x *Charge) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Charge) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

type Refund struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefundAmount     uint64       `protobuf:"varint,1,opt,name=refundAmount,proto3" json:"refundAmount,omitempty"`
	ProviderRefundId string       `protobuf:"bytes,2,opt,name=providerRefundId,proto3" json:"providerRefundId,omitempty"`
	Reason           RefundReason `protobuf:"varint,3,opt,name=reason,proto3,enum=paymentpb.RefundReason" json:"reason,omitempty"`
	Created          int64        `protobuf:"varint,4,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *Refund) Reset() {
	*x = Refund{}
	if protoimpl.UnsafeEnabled {
		mi := &file_paymentpb_payment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Refund) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Refund) ProtoMessage() {}

func (x *Refund) ProtoReflect() protoreflect.Message {
	mi := &file_paymentpb_payment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Refund.ProtoReflect.Descriptor instead.
func (*Refund) Descriptor() ([]byte, []int) {
	return file_paymentpb_payment_proto_rawDescGZIP(), []int{4}
}

func (x *Refund) GetRefundAmount() uint64 {
	if x != nil {
		return x.RefundAmount
	}
	return 0
}

func (x *Refund) GetProviderRefundId() string {
	if x != nil {
		return x.ProviderRefundId
	}
	return ""
}

func (x *Refund) GetReason() RefundReason {
	if x != nil {
		return x.Reason
	}
	return RefundReason_GeneralError
}

func (x *Refund) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number      string   `protobuf:"bytes,1,opt,name=Number,proto3" json:"Number,omitempty"`
	ExpireMonth string   `protobuf:"bytes,2,opt,name=ExpireMonth,proto3" json:"ExpireMonth,omitempty"`
	ExpireYear  string   `protobuf:"bytes,3,opt,name=ExpireYear,proto3" json:"ExpireYear,omitempty"`
	FirstName   string   `protobuf:"bytes,4,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName    string   `protobuf:"bytes,5,opt,name=LastName,proto3" json:"LastName,omitempty"`
	CVC         string   `protobuf:"bytes,6,opt,name=CVC,proto3" json:"CVC,omitempty"`
	Type        CardType `protobuf:"varint,8,opt,name=type,proto3,enum=paymentpb.CardType" json:"type,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_paymentpb_payment_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_paymentpb_payment_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_paymentpb_payment_proto_rawDescGZIP(), []int{5}
}

func (x *Card) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *Card) GetExpireMonth() string {
	if x != nil {
		return x.ExpireMonth
	}
	return ""
}

func (x *Card) GetExpireYear() string {
	if x != nil {
		return x.ExpireYear
	}
	return ""
}

func (x *Card) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Card) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Card) GetCVC() string {
	if x != nil {
		return x.CVC
	}
	return ""
}

func (x *Card) GetType() CardType {
	if x != nil {
		return x.Type
	}
	return CardType_CARD_Reserved
}

var File_paymentpb_payment_proto protoreflect.FileDescriptor

var file_paymentpb_payment_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x70, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x80, 0x03, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x70, 0x62, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x04, 0x43, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x68, 0x0a, 0x0d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0x1c, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xdc, 0x02,
	0x0a, 0x06, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2b, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x52, 0x07, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x2f, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0xe6, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x19, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0xe7, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xa3, 0x01, 0x0a,
	0x06, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x22, 0xd5, 0x01, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x59,
	0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x43, 0x56, 0x43, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x43, 0x56,
	0x43, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x2a, 0x4e, 0x0a, 0x11, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x6c, 0x69, 0x50, 0x61, 0x79,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x61, 0x79, 0x70, 0x61, 0x6c, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x57, 0x65, 0x43, 0x68, 0x61, 0x74, 0x10, 0x03, 0x2a, 0x26, 0x0a, 0x0c, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x61,
	0x69, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64,
	0x10, 0x01, 0x2a, 0x53, 0x0a, 0x0c, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x72, 0x61, 0x75, 0x64, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x10, 0x02, 0x12, 0x17,
	0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x79, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x10, 0x03, 0x2a, 0x73, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x63, 0x61, 0x72, 0x64, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x69, 0x73, 0x61, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x43, 0x42, 0x10, 0x04, 0x12, 0x0c,
	0x0a, 0x08, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a,
	0x44, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x43, 0x6c, 0x75, 0x62, 0x10, 0x06, 0x2a, 0x9d, 0x09, 0x0a,
	0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52,
	0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x46, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x4d, 0x44, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x47, 0x10, 0x04, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x52, 0x53, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x55, 0x44, 0x10,
	0x06, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x57, 0x47, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x5a,
	0x4e, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x41, 0x4d, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03,
	0x42, 0x42, 0x44, 0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x47, 0x4e, 0x10, 0x0b, 0x12, 0x07,
	0x0a, 0x03, 0x42, 0x48, 0x44, 0x10, 0x0c, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x4d, 0x44, 0x10, 0x0d,
	0x12, 0x07, 0x0a, 0x03, 0x42, 0x4e, 0x44, 0x10, 0x0e, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x4f, 0x42,
	0x10, 0x0f, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x52, 0x4c, 0x10, 0x10, 0x12, 0x07, 0x0a, 0x03, 0x42,
	0x53, 0x44, 0x10, 0x11, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x57, 0x50, 0x10, 0x12, 0x12, 0x07, 0x0a,
	0x03, 0x42, 0x59, 0x4e, 0x10, 0x13, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x59, 0x52, 0x10, 0x14, 0x12,
	0x07, 0x0a, 0x03, 0x42, 0x5a, 0x44, 0x10, 0x15, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x41, 0x44, 0x10,
	0x16, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4c, 0x50, 0x10, 0x17, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4e,
	0x59, 0x10, 0x18, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4f, 0x50, 0x10, 0x19, 0x12, 0x07, 0x0a, 0x03,
	0x43, 0x52, 0x43, 0x10, 0x1a, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x55, 0x50, 0x10, 0x1b, 0x12, 0x07,
	0x0a, 0x03, 0x43, 0x5a, 0x4b, 0x10, 0x1c, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4b, 0x4b, 0x10, 0x1d,
	0x12, 0x07, 0x0a, 0x03, 0x44, 0x4f, 0x50, 0x10, 0x1e, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x5a, 0x44,
	0x10, 0x1f, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x45, 0x4b, 0x10, 0x20, 0x12, 0x07, 0x0a, 0x03, 0x45,
	0x47, 0x50, 0x10, 0x21, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x55, 0x52, 0x10, 0x22, 0x12, 0x07, 0x0a,
	0x03, 0x46, 0x4a, 0x44, 0x10, 0x23, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x4b, 0x50, 0x10, 0x24, 0x12,
	0x07, 0x0a, 0x03, 0x47, 0x42, 0x50, 0x10, 0x25, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x47, 0x50, 0x10,
	0x26, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x48, 0x43, 0x10, 0x27, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x49,
	0x50, 0x10, 0x28, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x54, 0x51, 0x10, 0x29, 0x12, 0x07, 0x0a, 0x03,
	0x47, 0x59, 0x44, 0x10, 0x2a, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x4b, 0x44, 0x10, 0x2b, 0x12, 0x07,
	0x0a, 0x03, 0x48, 0x4e, 0x4c, 0x10, 0x2c, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x52, 0x4b, 0x10, 0x2d,
	0x12, 0x07, 0x0a, 0x03, 0x48, 0x55, 0x46, 0x10, 0x2e, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x44, 0x52,
	0x10, 0x2f, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4c, 0x53, 0x10, 0x30, 0x12, 0x07, 0x0a, 0x03, 0x49,
	0x4d, 0x50, 0x10, 0x31, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x52, 0x10, 0x32, 0x12, 0x07, 0x0a,
	0x03, 0x49, 0x51, 0x44, 0x10, 0x33, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x52, 0x52, 0x10, 0x34, 0x12,
	0x07, 0x0a, 0x03, 0x49, 0x53, 0x4b, 0x10, 0x35, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x45, 0x50, 0x10,
	0x36, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x4d, 0x44, 0x10, 0x37, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x4f,
	0x44, 0x10, 0x38, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x50, 0x59, 0x10, 0x39, 0x12, 0x07, 0x0a, 0x03,
	0x4b, 0x45, 0x53, 0x10, 0x3a, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x47, 0x53, 0x10, 0x3b, 0x12, 0x07,
	0x0a, 0x03, 0x4b, 0x48, 0x52, 0x10, 0x3c, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x50, 0x57, 0x10, 0x3d,
	0x12, 0x07, 0x0a, 0x03, 0x4b, 0x52, 0x57, 0x10, 0x3e, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x57, 0x44,
	0x10, 0x3f, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x59, 0x44, 0x10, 0x40, 0x12, 0x07, 0x0a, 0x03, 0x4b,
	0x5a, 0x54, 0x10, 0x41, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x41, 0x4b, 0x10, 0x42, 0x12, 0x07, 0x0a,
	0x03, 0x4c, 0x42, 0x50, 0x10, 0x43, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4b, 0x52, 0x10, 0x44, 0x12,
	0x07, 0x0a, 0x03, 0x4c, 0x52, 0x44, 0x10, 0x45, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x54, 0x4c, 0x10,
	0x46, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x56, 0x4c, 0x10, 0x47, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x59,
	0x44, 0x10, 0x48, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x44, 0x10, 0x49, 0x12, 0x07, 0x0a, 0x03,
	0x4d, 0x4b, 0x44, 0x10, 0x4a, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4e, 0x54, 0x10, 0x4b, 0x12, 0x07,
	0x0a, 0x03, 0x4d, 0x55, 0x52, 0x10, 0x4c, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x58, 0x4e, 0x10, 0x4d,
	0x12, 0x07, 0x0a, 0x03, 0x4d, 0x57, 0x4b, 0x10, 0x4e, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x59, 0x52,
	0x10, 0x4f, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x5a, 0x4e, 0x10, 0x50, 0x12, 0x07, 0x0a, 0x03, 0x4e,
	0x41, 0x44, 0x10, 0x51, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x47, 0x4e, 0x10, 0x52, 0x12, 0x07, 0x0a,
	0x03, 0x4e, 0x49, 0x4f, 0x10, 0x53, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x4f, 0x4b, 0x10, 0x54, 0x12,
	0x07, 0x0a, 0x03, 0x4e, 0x50, 0x52, 0x10, 0x55, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x5a, 0x44, 0x10,
	0x56, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x4d, 0x52, 0x10, 0x57, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x41,
	0x42, 0x10, 0x58, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x45, 0x4e, 0x10, 0x59, 0x12, 0x07, 0x0a, 0x03,
	0x50, 0x48, 0x50, 0x10, 0x5a, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x4b, 0x52, 0x10, 0x5b, 0x12, 0x07,
	0x0a, 0x03, 0x50, 0x4c, 0x4e, 0x10, 0x5c, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x59, 0x47, 0x10, 0x5d,
	0x12, 0x07, 0x0a, 0x03, 0x51, 0x41, 0x52, 0x10, 0x5e, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x4f, 0x4e,
	0x10, 0x5f, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x53, 0x44, 0x10, 0x60, 0x12, 0x07, 0x0a, 0x03, 0x52,
	0x55, 0x42, 0x10, 0x61, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x55, 0x52, 0x10, 0x62, 0x12, 0x07, 0x0a,
	0x03, 0x53, 0x41, 0x52, 0x10, 0x63, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x42, 0x44, 0x10, 0x64, 0x12,
	0x07, 0x0a, 0x03, 0x53, 0x43, 0x52, 0x10, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x45, 0x4b, 0x10,
	0x66, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x47, 0x44, 0x10, 0x67, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x48,
	0x50, 0x10, 0x68, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x4f, 0x53, 0x10, 0x69, 0x12, 0x07, 0x0a, 0x03,
	0x53, 0x52, 0x44, 0x10, 0x6a, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x56, 0x43, 0x10, 0x6b, 0x12, 0x07,
	0x0a, 0x03, 0x53, 0x59, 0x50, 0x10, 0x6c, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x48, 0x42, 0x10, 0x6d,
	0x12, 0x07, 0x0a, 0x03, 0x54, 0x4e, 0x44, 0x10, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x52, 0x4c,
	0x10, 0x6f, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x52, 0x59, 0x10, 0x70, 0x12, 0x07, 0x0a, 0x03, 0x54,
	0x54, 0x44, 0x10, 0x71, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x57, 0x44, 0x10, 0x72, 0x12, 0x07, 0x0a,
	0x03, 0x54, 0x5a, 0x53, 0x10, 0x73, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x41, 0x48, 0x10, 0x74, 0x12,
	0x07, 0x0a, 0x03, 0x55, 0x47, 0x58, 0x10, 0x75, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x45, 0x44, 0x10,
	0x76, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x59, 0x55, 0x10, 0x77, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x5a,
	0x53, 0x10, 0x78, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x45, 0x46, 0x10, 0x79, 0x12, 0x07, 0x0a, 0x03,
	0x56, 0x4e, 0x44, 0x10, 0x7a, 0x12, 0x07, 0x0a, 0x03, 0x58, 0x43, 0x44, 0x10, 0x7b, 0x12, 0x07,
	0x0a, 0x03, 0x59, 0x45, 0x52, 0x10, 0x7c, 0x12, 0x07, 0x0a, 0x03, 0x5a, 0x41, 0x52, 0x10, 0x7d,
	0x12, 0x07, 0x0a, 0x03, 0x5a, 0x4d, 0x57, 0x10, 0x7e, 0x12, 0x07, 0x0a, 0x03, 0x5a, 0x57, 0x44,
	0x10, 0x7f, 0x12, 0x08, 0x0a, 0x03, 0x55, 0x53, 0x44, 0x10, 0x80, 0x01, 0x32, 0xf4, 0x01, 0x0a,
	0x0e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x4c, 0x0a, 0x09, 0x4e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x18, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0c, 0x22, 0x07, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x4f, 0x0a,
	0x0c, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x18, 0x2e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0c, 0x22, 0x07, 0x2f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x43,
	0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x22,
	0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x07, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x3a, 0x01, 0x2a, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x78, 0x69, 0x64, 0x6f, 0x6e, 0x67, 0x63, 0x2f, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x5f, 0x65, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_paymentpb_payment_proto_rawDescOnce sync.Once
	file_paymentpb_payment_proto_rawDescData = file_paymentpb_payment_proto_rawDesc
)

func file_paymentpb_payment_proto_rawDescGZIP() []byte {
	file_paymentpb_payment_proto_rawDescOnce.Do(func() {
		file_paymentpb_payment_proto_rawDescData = protoimpl.X.CompressGZIP(file_paymentpb_payment_proto_rawDescData)
	})
	return file_paymentpb_payment_proto_rawDescData
}

var file_paymentpb_payment_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_paymentpb_payment_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_paymentpb_payment_proto_goTypes = []interface{}{
	(PaymentProviderId)(0), // 0: paymentpb.PaymentProviderId
	(ChargeStatus)(0),      // 1: paymentpb.ChargeStatus
	(RefundReason)(0),      // 2: paymentpb.RefundReason
	(CardType)(0),          // 3: paymentpb.CardType
	(Currency)(0),          // 4: paymentpb.Currency
	(*ChargeRequest)(nil),  // 5: paymentpb.ChargeRequest
	(*RefundRequest)(nil),  // 6: paymentpb.RefundRequest
	(*GetRequest)(nil),     // 7: paymentpb.GetRequest
	(*Charge)(nil),         // 8: paymentpb.Charge
	(*Refund)(nil),         // 9: paymentpb.Refund
	(*Card)(nil),           // 10: paymentpb.Card
	nil,                    // 11: paymentpb.ChargeRequest.MetadataEntry
}
var file_paymentpb_payment_proto_depIdxs = []int32{
	4,  // 0: paymentpb.ChargeRequest.currency:type_name -> paymentpb.Currency
	10, // 1: paymentpb.ChargeRequest.Card:type_name -> paymentpb.Card
	0,  // 2: paymentpb.ChargeRequest.paymentProviderId:type_name -> paymentpb.PaymentProviderId
	11, // 3: paymentpb.ChargeRequest.metadata:type_name -> paymentpb.ChargeRequest.MetadataEntry
	2,  // 4: paymentpb.RefundRequest.reason:type_name -> paymentpb.RefundReason
	9,  // 5: paymentpb.Charge.refunds:type_name -> paymentpb.Refund
	4,  // 6: paymentpb.Charge.currency:type_name -> paymentpb.Currency
	2,  // 7: paymentpb.Refund.reason:type_name -> paymentpb.RefundReason
	3,  // 8: paymentpb.Card.type:type_name -> paymentpb.CardType
	5,  // 9: paymentpb.PaymentService.NewCharge:input_type -> paymentpb.ChargeRequest
	6,  // 10: paymentpb.PaymentService.RefundCharge:input_type -> paymentpb.RefundRequest
	7,  // 11: paymentpb.PaymentService.Get:input_type -> paymentpb.GetRequest
	8,  // 12: paymentpb.PaymentService.NewCharge:output_type -> paymentpb.Charge
	8,  // 13: paymentpb.PaymentService.RefundCharge:output_type -> paymentpb.Charge
	8,  // 14: paymentpb.PaymentService.Get:output_type -> paymentpb.Charge
	12, // [12:15] is the sub-list for method output_type
	9,  // [9:12] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_paymentpb_payment_proto_init() }
func file_paymentpb_payment_proto_init() {
	if File_paymentpb_payment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_paymentpb_payment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_paymentpb_payment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_paymentpb_payment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_paymentpb_payment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Charge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_paymentpb_payment_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Refund); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_paymentpb_payment_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_paymentpb_payment_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_paymentpb_payment_proto_goTypes,
		DependencyIndexes: file_paymentpb_payment_proto_depIdxs,
		EnumInfos:         file_paymentpb_payment_proto_enumTypes,
		MessageInfos:      file_paymentpb_payment_proto_msgTypes,
	}.Build()
	File_paymentpb_payment_proto = out.File
	file_paymentpb_payment_proto_rawDesc = nil
	file_paymentpb_payment_proto_goTypes = nil
	file_paymentpb_payment_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PaymentServiceClient interface {
	NewCharge(ctx context.Context, in *ChargeRequest, opts ...grpc.CallOption) (*Charge, error)
	RefundCharge(ctx context.Context, in *RefundRequest, opts ...grpc.CallOption) (*Charge, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Charge, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) NewCharge(ctx context.Context, in *ChargeRequest, opts ...grpc.CallOption) (*Charge, error) {
	out := new(Charge)
	err := c.cc.Invoke(ctx, "/paymentpb.PaymentService/NewCharge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) RefundCharge(ctx context.Context, in *RefundRequest, opts ...grpc.CallOption) (*Charge, error) {
	out := new(Charge)
	err := c.cc.Invoke(ctx, "/paymentpb.PaymentService/RefundCharge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Charge, error) {
	out := new(Charge)
	err := c.cc.Invoke(ctx, "/paymentpb.PaymentService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
type PaymentServiceServer interface {
	NewCharge(context.Context, *ChargeRequest) (*Charge, error)
	RefundCharge(context.Context, *RefundRequest) (*Charge, error)
	Get(context.Context, *GetRequest) (*Charge, error)
}

// UnimplementedPaymentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPaymentServiceServer struct {
}

func (*UnimplementedPaymentServiceServer) NewCharge(context.Context, *ChargeRequest) (*Charge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewCharge not implemented")
}
func (*UnimplementedPaymentServiceServer) RefundCharge(context.Context, *RefundRequest) (*Charge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundCharge not implemented")
}
func (*UnimplementedPaymentServiceServer) Get(context.Context, *GetRequest) (*Charge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterPaymentServiceServer(s *grpc.Server, srv PaymentServiceServer) {
	s.RegisterService(&_PaymentService_serviceDesc, srv)
}

func _PaymentService_NewCharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).NewCharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paymentpb.PaymentService/NewCharge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).NewCharge(ctx, req.(*ChargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_RefundCharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).RefundCharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paymentpb.PaymentService/RefundCharge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).RefundCharge(ctx, req.(*RefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paymentpb.PaymentService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PaymentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "paymentpb.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewCharge",
			Handler:    _PaymentService_NewCharge_Handler,
		},
		{
			MethodName: "RefundCharge",
			Handler:    _PaymentService_RefundCharge_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PaymentService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "paymentpb/payment.proto",
}
