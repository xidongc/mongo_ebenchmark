// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: sku/skupb/sku.proto

package skupb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	paymentpb "github.com/xidongc/mongo_ebenchmark/model/payment/paymentpb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Inventory_Type int32

const (
	Inventory_Infinite Inventory_Type = 0
	Inventory_Finite   Inventory_Type = 1
)

// Enum value maps for Inventory_Type.
var (
	Inventory_Type_name = map[int32]string{
		0: "Infinite",
		1: "Finite",
	}
	Inventory_Type_value = map[string]int32{
		"Infinite": 0,
		"Finite":   1,
	}
)

func (x Inventory_Type) Enum() *Inventory_Type {
	p := new(Inventory_Type)
	*p = x
	return p
}

func (x Inventory_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Inventory_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_sku_skupb_sku_proto_enumTypes[0].Descriptor()
}

func (Inventory_Type) Type() protoreflect.EnumType {
	return &file_sku_skupb_sku_proto_enumTypes[0]
}

func (x Inventory_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Inventory_Type.Descriptor instead.
func (Inventory_Type) EnumDescriptor() ([]byte, []int) {
	return file_sku_skupb_sku_proto_rawDescGZIP(), []int{6, 0}
}

type UpsertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Currency          paymentpb.Currency `protobuf:"varint,2,opt,name=currency,proto3,enum=paymentpb.Currency" json:"currency,omitempty"`
	Active            bool               `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	ProductId         string             `protobuf:"bytes,4,opt,name=productId,proto3" json:"productId,omitempty"`
	Price             uint64             `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`
	Metadata          map[string]string  `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Image             string             `protobuf:"bytes,7,opt,name=image,proto3" json:"image,omitempty"`
	SkuLabel          string             `protobuf:"bytes,8,opt,name=skuLabel,proto3" json:"skuLabel,omitempty"`
	PackageDimensions *PackageDimensions `protobuf:"bytes,9,opt,name=packageDimensions,proto3" json:"packageDimensions,omitempty"`
	Inventory         *Inventory         `protobuf:"bytes,10,opt,name=inventory,proto3" json:"inventory,omitempty"`
	Attributes        map[string]string  `protobuf:"bytes,11,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	HasBattery        bool               `protobuf:"varint,12,opt,name=hasBattery,proto3" json:"hasBattery,omitempty"`
	HasLiquid         bool               `protobuf:"varint,13,opt,name=hasLiquid,proto3" json:"hasLiquid,omitempty"`
	HasSensitive      bool               `protobuf:"varint,14,opt,name=hasSensitive,proto3" json:"hasSensitive,omitempty"`
	Description       string             `protobuf:"bytes,15,opt,name=description,proto3" json:"description,omitempty"`
	Supplier          string             `protobuf:"bytes,16,opt,name=supplier,proto3" json:"supplier,omitempty"`
}

func (x *UpsertRequest) Reset() {
	*x = UpsertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sku_skupb_sku_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertRequest) ProtoMessage() {}

func (x *UpsertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sku_skupb_sku_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertRequest.ProtoReflect.Descriptor instead.
func (*UpsertRequest) Descriptor() ([]byte, []int) {
	return file_sku_skupb_sku_proto_rawDescGZIP(), []int{0}
}

func (x *UpsertRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpsertRequest) GetCurrency() paymentpb.Currency {
	if x != nil {
		return x.Currency
	}
	return paymentpb.Currency_CUR_RESERVED
}

func (x *UpsertRequest) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *UpsertRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *UpsertRequest) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *UpsertRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UpsertRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *UpsertRequest) GetSkuLabel() string {
	if x != nil {
		return x.SkuLabel
	}
	return ""
}

func (x *UpsertRequest) GetPackageDimensions() *PackageDimensions {
	if x != nil {
		return x.PackageDimensions
	}
	return nil
}

func (x *UpsertRequest) GetInventory() *Inventory {
	if x != nil {
		return x.Inventory
	}
	return nil
}

func (x *UpsertRequest) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *UpsertRequest) GetHasBattery() bool {
	if x != nil {
		return x.HasBattery
	}
	return false
}

func (x *UpsertRequest) GetHasLiquid() bool {
	if x != nil {
		return x.HasLiquid
	}
	return false
}

func (x *UpsertRequest) GetHasSensitive() bool {
	if x != nil {
		return x.HasSensitive
	}
	return false
}

func (x *UpsertRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpsertRequest) GetSupplier() string {
	if x != nil {
		return x.Supplier
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sku_skupb_sku_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_sku_skupb_sku_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_sku_skupb_sku_proto_rawDescGZIP(), []int{1}
}

type GetProductSkusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId string `protobuf:"bytes,1,opt,name=productId,proto3" json:"productId,omitempty"`
}

func (x *GetProductSkusRequest) Reset() {
	*x = GetProductSkusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sku_skupb_sku_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductSkusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductSkusRequest) ProtoMessage() {}

func (x *GetProductSkusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sku_skupb_sku_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductSkusRequest.ProtoReflect.Descriptor instead.
func (*GetProductSkusRequest) Descriptor() ([]byte, []int) {
	return file_sku_skupb_sku_proto_rawDescGZIP(), []int{2}
}

func (x *GetProductSkusRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sku_skupb_sku_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sku_skupb_sku_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_sku_skupb_sku_proto_rawDescGZIP(), []int{3}
}

func (x *GetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sku_skupb_sku_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sku_skupb_sku_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_sku_skupb_sku_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Sku struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Price             uint64             `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"` // dollar
	Currency          paymentpb.Currency `protobuf:"varint,4,opt,name=currency,proto3,enum=paymentpb.Currency" json:"currency,omitempty"`
	Active            bool               `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	ProductId         string             `protobuf:"bytes,6,opt,name=productId,proto3" json:"productId,omitempty"`
	Metadata          map[string]string  `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Attributes        map[string]string  `protobuf:"bytes,8,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Image             string             `protobuf:"bytes,9,opt,name=image,proto3" json:"image,omitempty"`
	PackageDimensions *PackageDimensions `protobuf:"bytes,10,opt,name=packageDimensions,proto3" json:"packageDimensions,omitempty"`
	Inventory         []*Inventory       `protobuf:"bytes,11,rep,name=inventory,proto3" json:"inventory,omitempty"`
	HasBattery        bool               `protobuf:"varint,12,opt,name=hasBattery,proto3" json:"hasBattery,omitempty"`
	HasLiquid         bool               `protobuf:"varint,13,opt,name=hasLiquid,proto3" json:"hasLiquid,omitempty"`
	HasSensitive      bool               `protobuf:"varint,14,opt,name=hasSensitive,proto3" json:"hasSensitive,omitempty"`
	Description       string             `protobuf:"bytes,15,opt,name=description,proto3" json:"description,omitempty"`
	SkuLabel          string             `protobuf:"bytes,16,opt,name=skuLabel,proto3" json:"skuLabel,omitempty"`
	Supplier          string             `protobuf:"bytes,17,opt,name=supplier,proto3" json:"supplier,omitempty"`
	Created           int64              `protobuf:"varint,998,opt,name=created,proto3" json:"created,omitempty"`
	Updated           int64              `protobuf:"varint,999,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *Sku) Reset() {
	*x = Sku{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sku_skupb_sku_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sku) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sku) ProtoMessage() {}

func (x *Sku) ProtoReflect() protoreflect.Message {
	mi := &file_sku_skupb_sku_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sku.ProtoReflect.Descriptor instead.
func (*Sku) Descriptor() ([]byte, []int) {
	return file_sku_skupb_sku_proto_rawDescGZIP(), []int{5}
}

func (x *Sku) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Sku) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sku) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Sku) GetCurrency() paymentpb.Currency {
	if x != nil {
		return x.Currency
	}
	return paymentpb.Currency_CUR_RESERVED
}

func (x *Sku) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Sku) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *Sku) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Sku) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Sku) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Sku) GetPackageDimensions() *PackageDimensions {
	if x != nil {
		return x.PackageDimensions
	}
	return nil
}

func (x *Sku) GetInventory() []*Inventory {
	if x != nil {
		return x.Inventory
	}
	return nil
}

func (x *Sku) GetHasBattery() bool {
	if x != nil {
		return x.HasBattery
	}
	return false
}

func (x *Sku) GetHasLiquid() bool {
	if x != nil {
		return x.HasLiquid
	}
	return false
}

func (x *Sku) GetHasSensitive() bool {
	if x != nil {
		return x.HasSensitive
	}
	return false
}

func (x *Sku) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Sku) GetSkuLabel() string {
	if x != nil {
		return x.SkuLabel
	}
	return ""
}

func (x *Sku) GetSupplier() string {
	if x != nil {
		return x.Supplier
	}
	return ""
}

func (x *Sku) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Sku) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

type Inventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkuId       int64          `protobuf:"varint,1,opt,name=skuId,proto3" json:"skuId,omitempty"`
	WarehouseId int64          `protobuf:"varint,2,opt,name=warehouseId,proto3" json:"warehouseId,omitempty"`
	Quantity    int64          `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"` // available quantity
	Type        Inventory_Type `protobuf:"varint,4,opt,name=type,proto3,enum=skupb.Inventory_Type" json:"type,omitempty"`
}

func (x *Inventory) Reset() {
	*x = Inventory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sku_skupb_sku_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inventory) ProtoMessage() {}

func (x *Inventory) ProtoReflect() protoreflect.Message {
	mi := &file_sku_skupb_sku_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inventory.ProtoReflect.Descriptor instead.
func (*Inventory) Descriptor() ([]byte, []int) {
	return file_sku_skupb_sku_proto_rawDescGZIP(), []int{6}
}

func (x *Inventory) GetSkuId() int64 {
	if x != nil {
		return x.SkuId
	}
	return 0
}

func (x *Inventory) GetWarehouseId() int64 {
	if x != nil {
		return x.WarehouseId
	}
	return 0
}

func (x *Inventory) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Inventory) GetType() Inventory_Type {
	if x != nil {
		return x.Type
	}
	return Inventory_Infinite
}

type PackageDimensions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height float64 `protobuf:"fixed64,1,opt,name=height,proto3" json:"height,omitempty"`
	Length float64 `protobuf:"fixed64,2,opt,name=length,proto3" json:"length,omitempty"`
	Weight float64 `protobuf:"fixed64,3,opt,name=weight,proto3" json:"weight,omitempty"`
	Width  float64 `protobuf:"fixed64,4,opt,name=width,proto3" json:"width,omitempty"`
}

func (x *PackageDimensions) Reset() {
	*x = PackageDimensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sku_skupb_sku_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageDimensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageDimensions) ProtoMessage() {}

func (x *PackageDimensions) ProtoReflect() protoreflect.Message {
	mi := &file_sku_skupb_sku_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageDimensions.ProtoReflect.Descriptor instead.
func (*PackageDimensions) Descriptor() ([]byte, []int) {
	return file_sku_skupb_sku_proto_rawDescGZIP(), []int{7}
}

func (x *PackageDimensions) GetHeight() float64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *PackageDimensions) GetLength() float64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *PackageDimensions) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *PackageDimensions) GetWidth() float64 {
	if x != nil {
		return x.Width
	}
	return 0
}

type Skus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Skus []*Sku `protobuf:"bytes,1,rep,name=skus,proto3" json:"skus,omitempty"`
}

func (x *Skus) Reset() {
	*x = Skus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sku_skupb_sku_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Skus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Skus) ProtoMessage() {}

func (x *Skus) ProtoReflect() protoreflect.Message {
	mi := &file_sku_skupb_sku_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Skus.ProtoReflect.Descriptor instead.
func (*Skus) Descriptor() ([]byte, []int) {
	return file_sku_skupb_sku_proto_rawDescGZIP(), []int{8}
}

func (x *Skus) GetSkus() []*Sku {
	if x != nil {
		return x.Skus
	}
	return nil
}

var File_sku_skupb_sku_proto protoreflect.FileDescriptor

var file_sku_skupb_sku_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x6b, 0x75, 0x2f, 0x73, 0x6b, 0x75, 0x70, 0x62, 0x2f, 0x73, 0x6b, 0x75, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73, 0x6b, 0x75, 0x70, 0x62, 0x1a, 0x1f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xec, 0x05, 0x0a, 0x0d,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3e,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x73, 0x6b, 0x75, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6b, 0x75, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6b, 0x75, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x46, 0x0a, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6b,
	0x75, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x44, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x6b,
	0x75, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x09, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x44, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73,
	0x6b, 0x75, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x68, 0x61, 0x73, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x68, 0x61, 0x73, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x68, 0x61, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x1a, 0x3b,
	0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x35, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x6b, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x20, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x23, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x94, 0x06, 0x0a, 0x03, 0x53, 0x6b, 0x75, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x70,
	0x62, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x6b, 0x75, 0x70, 0x62, 0x2e, 0x53, 0x6b, 0x75, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6b, 0x75, 0x70, 0x62, 0x2e, 0x53, 0x6b, 0x75,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x6b, 0x75, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x73, 0x6b, 0x75, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61,
	0x73, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x68, 0x61, 0x73, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61,
	0x73, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68,
	0x61, 0x73, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x53,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x68, 0x61, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x6b, 0x75, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x6b, 0x75, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0xe6, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x19, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0xe7, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x3b, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xac, 0x01, 0x0a, 0x09, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x6b, 0x75, 0x70, 0x62,
	0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x20, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a,
	0x08, 0x49, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x69, 0x6e, 0x69, 0x74, 0x65, 0x10, 0x01, 0x22, 0x71, 0x0a, 0x11, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0x26, 0x0a, 0x04, 0x53, 0x6b,
	0x75, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x73, 0x6b, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x73, 0x6b, 0x75, 0x70, 0x62, 0x2e, 0x53, 0x6b, 0x75, 0x52, 0x04, 0x73, 0x6b,
	0x75, 0x73, 0x32, 0x84, 0x02, 0x0a, 0x0a, 0x53, 0x6b, 0x75, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x38, 0x0a, 0x03, 0x4e, 0x65, 0x77, 0x12, 0x14, 0x2e, 0x73, 0x6b, 0x75, 0x70, 0x62,
	0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a,
	0x2e, 0x73, 0x6b, 0x75, 0x70, 0x62, 0x2e, 0x53, 0x6b, 0x75, 0x22, 0x0f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x09, 0x22, 0x04, 0x2f, 0x73, 0x6b, 0x75, 0x3a, 0x01, 0x2a, 0x12, 0x32, 0x0a, 0x03, 0x47,
	0x65, 0x74, 0x12, 0x11, 0x2e, 0x73, 0x6b, 0x75, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x73, 0x6b, 0x75, 0x70, 0x62, 0x2e, 0x53, 0x6b,
	0x75, 0x22, 0x0c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x06, 0x12, 0x04, 0x2f, 0x73, 0x6b, 0x75, 0x12,
	0x3a, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x73, 0x6b, 0x75, 0x70,
	0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0c, 0x2e, 0x73, 0x6b, 0x75, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x0c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x06, 0x2a, 0x04, 0x2f, 0x73, 0x6b, 0x75, 0x12, 0x4c, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x73, 0x12, 0x1c, 0x2e,
	0x73, 0x6b, 0x75, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x6b, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x73, 0x6b,
	0x75, 0x70, 0x62, 0x2e, 0x53, 0x6b, 0x75, 0x73, 0x22, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x09,
	0x22, 0x04, 0x2f, 0x73, 0x6b, 0x75, 0x3a, 0x01, 0x2a, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x69, 0x64, 0x6f, 0x6e, 0x67, 0x63, 0x2f,
	0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x65, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x6b, 0x75, 0x2f, 0x73, 0x6b, 0x75, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sku_skupb_sku_proto_rawDescOnce sync.Once
	file_sku_skupb_sku_proto_rawDescData = file_sku_skupb_sku_proto_rawDesc
)

func file_sku_skupb_sku_proto_rawDescGZIP() []byte {
	file_sku_skupb_sku_proto_rawDescOnce.Do(func() {
		file_sku_skupb_sku_proto_rawDescData = protoimpl.X.CompressGZIP(file_sku_skupb_sku_proto_rawDescData)
	})
	return file_sku_skupb_sku_proto_rawDescData
}

var file_sku_skupb_sku_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_sku_skupb_sku_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_sku_skupb_sku_proto_goTypes = []interface{}{
	(Inventory_Type)(0),           // 0: skupb.Inventory.Type
	(*UpsertRequest)(nil),         // 1: skupb.UpsertRequest
	(*Empty)(nil),                 // 2: skupb.Empty
	(*GetProductSkusRequest)(nil), // 3: skupb.GetProductSkusRequest
	(*GetRequest)(nil),            // 4: skupb.GetRequest
	(*DeleteRequest)(nil),         // 5: skupb.DeleteRequest
	(*Sku)(nil),                   // 6: skupb.Sku
	(*Inventory)(nil),             // 7: skupb.Inventory
	(*PackageDimensions)(nil),     // 8: skupb.PackageDimensions
	(*Skus)(nil),                  // 9: skupb.Skus
	nil,                           // 10: skupb.UpsertRequest.MetadataEntry
	nil,                           // 11: skupb.UpsertRequest.AttributesEntry
	nil,                           // 12: skupb.Sku.MetadataEntry
	nil,                           // 13: skupb.Sku.AttributesEntry
	(paymentpb.Currency)(0),       // 14: paymentpb.Currency
}
var file_sku_skupb_sku_proto_depIdxs = []int32{
	14, // 0: skupb.UpsertRequest.currency:type_name -> paymentpb.Currency
	10, // 1: skupb.UpsertRequest.metadata:type_name -> skupb.UpsertRequest.MetadataEntry
	8,  // 2: skupb.UpsertRequest.packageDimensions:type_name -> skupb.PackageDimensions
	7,  // 3: skupb.UpsertRequest.inventory:type_name -> skupb.Inventory
	11, // 4: skupb.UpsertRequest.attributes:type_name -> skupb.UpsertRequest.AttributesEntry
	14, // 5: skupb.Sku.currency:type_name -> paymentpb.Currency
	12, // 6: skupb.Sku.metadata:type_name -> skupb.Sku.MetadataEntry
	13, // 7: skupb.Sku.attributes:type_name -> skupb.Sku.AttributesEntry
	8,  // 8: skupb.Sku.packageDimensions:type_name -> skupb.PackageDimensions
	7,  // 9: skupb.Sku.inventory:type_name -> skupb.Inventory
	0,  // 10: skupb.Inventory.type:type_name -> skupb.Inventory.Type
	6,  // 11: skupb.Skus.skus:type_name -> skupb.Sku
	1,  // 12: skupb.SkuService.New:input_type -> skupb.UpsertRequest
	4,  // 13: skupb.SkuService.Get:input_type -> skupb.GetRequest
	5,  // 14: skupb.SkuService.Delete:input_type -> skupb.DeleteRequest
	3,  // 15: skupb.SkuService.GetProductSkus:input_type -> skupb.GetProductSkusRequest
	6,  // 16: skupb.SkuService.New:output_type -> skupb.Sku
	6,  // 17: skupb.SkuService.Get:output_type -> skupb.Sku
	2,  // 18: skupb.SkuService.Delete:output_type -> skupb.Empty
	9,  // 19: skupb.SkuService.GetProductSkus:output_type -> skupb.Skus
	16, // [16:20] is the sub-list for method output_type
	12, // [12:16] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_sku_skupb_sku_proto_init() }
func file_sku_skupb_sku_proto_init() {
	if File_sku_skupb_sku_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sku_skupb_sku_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sku_skupb_sku_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sku_skupb_sku_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductSkusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sku_skupb_sku_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sku_skupb_sku_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sku_skupb_sku_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sku); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sku_skupb_sku_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inventory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sku_skupb_sku_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageDimensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sku_skupb_sku_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Skus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sku_skupb_sku_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sku_skupb_sku_proto_goTypes,
		DependencyIndexes: file_sku_skupb_sku_proto_depIdxs,
		EnumInfos:         file_sku_skupb_sku_proto_enumTypes,
		MessageInfos:      file_sku_skupb_sku_proto_msgTypes,
	}.Build()
	File_sku_skupb_sku_proto = out.File
	file_sku_skupb_sku_proto_rawDesc = nil
	file_sku_skupb_sku_proto_goTypes = nil
	file_sku_skupb_sku_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SkuServiceClient is the client API for SkuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SkuServiceClient interface {
	New(ctx context.Context, in *UpsertRequest, opts ...grpc.CallOption) (*Sku, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Sku, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Empty, error)
	GetProductSkus(ctx context.Context, in *GetProductSkusRequest, opts ...grpc.CallOption) (*Skus, error)
}

type skuServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSkuServiceClient(cc grpc.ClientConnInterface) SkuServiceClient {
	return &skuServiceClient{cc}
}

func (c *skuServiceClient) New(ctx context.Context, in *UpsertRequest, opts ...grpc.CallOption) (*Sku, error) {
	out := new(Sku)
	err := c.cc.Invoke(ctx, "/skupb.SkuService/New", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skuServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Sku, error) {
	out := new(Sku)
	err := c.cc.Invoke(ctx, "/skupb.SkuService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skuServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/skupb.SkuService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skuServiceClient) GetProductSkus(ctx context.Context, in *GetProductSkusRequest, opts ...grpc.CallOption) (*Skus, error) {
	out := new(Skus)
	err := c.cc.Invoke(ctx, "/skupb.SkuService/GetProductSkus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SkuServiceServer is the cfg API for SkuService service.
type SkuServiceServer interface {
	New(context.Context, *UpsertRequest) (*Sku, error)
	Get(context.Context, *GetRequest) (*Sku, error)
	Delete(context.Context, *DeleteRequest) (*Empty, error)
	GetProductSkus(context.Context, *GetProductSkusRequest) (*Skus, error)
}

// UnimplementedSkuServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSkuServiceServer struct {
}

func (*UnimplementedSkuServiceServer) New(context.Context, *UpsertRequest) (*Sku, error) {
	return nil, status.Errorf(codes.Unimplemented, "method New not implemented")
}
func (*UnimplementedSkuServiceServer) Get(context.Context, *GetRequest) (*Sku, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedSkuServiceServer) Delete(context.Context, *DeleteRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedSkuServiceServer) GetProductSkus(context.Context, *GetProductSkusRequest) (*Skus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductSkus not implemented")
}

func RegisterSkuServiceServer(s *grpc.Server, srv SkuServiceServer) {
	s.RegisterService(&_SkuService_serviceDesc, srv)
}

func _SkuService_New_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkuServiceServer).New(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skupb.SkuService/New",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkuServiceServer).New(ctx, req.(*UpsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkuService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkuServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skupb.SkuService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkuServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkuService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkuServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skupb.SkuService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkuServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkuService_GetProductSkus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductSkusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkuServiceServer).GetProductSkus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skupb.SkuService/GetProductSkus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkuServiceServer).GetProductSkus(ctx, req.(*GetProductSkusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SkuService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "skupb.SkuService",
	HandlerType: (*SkuServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "New",
			Handler:    _SkuService_New_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SkuService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SkuService_Delete_Handler,
		},
		{
			MethodName: "GetProductSkus",
			Handler:    _SkuService_GetProductSkus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sku/skupb/sku.proto",
}
